"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MosaicDefinitionBuilder = void 0;
const GeneratorUtils_1 = require("./GeneratorUtils");
const HeightDto_1 = require("./HeightDto");
const KeyDto_1 = require("./KeyDto");
const MosaicPropertiesBuilder_1 = require("./MosaicPropertiesBuilder");
class MosaicDefinitionBuilder {
    constructor(startHeight, ownerPublicKey, revision, properties) {
        this.startHeight = startHeight;
        this.ownerPublicKey = ownerPublicKey;
        this.revision = revision;
        this.properties = properties;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const startHeight = HeightDto_1.HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, startHeight.getSize());
        const ownerPublicKey = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, ownerPublicKey.getSize());
        const revision = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const properties = MosaicPropertiesBuilder_1.MosaicPropertiesBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, properties.getSize());
        return new MosaicDefinitionBuilder(startHeight, ownerPublicKey, revision, properties);
    }
    getStartHeight() {
        return this.startHeight;
    }
    getOwnerPublicKey() {
        return this.ownerPublicKey;
    }
    getRevision() {
        return this.revision;
    }
    getProperties() {
        return this.properties;
    }
    getSize() {
        let size = 0;
        size += this.startHeight.getSize();
        size += this.ownerPublicKey.getSize();
        size += 4;
        size += this.properties.getSize();
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const startHeightBytes = this.startHeight.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, startHeightBytes);
        const ownerPublicKeyBytes = this.ownerPublicKey.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, ownerPublicKeyBytes);
        const revisionBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getRevision(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, revisionBytes);
        const propertiesBytes = this.properties.serialize();
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, propertiesBytes);
        return newArray;
    }
}
exports.MosaicDefinitionBuilder = MosaicDefinitionBuilder;
//# sourceMappingURL=MosaicDefinitionBuilder.js.map