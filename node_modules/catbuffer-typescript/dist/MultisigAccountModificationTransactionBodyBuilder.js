"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultisigAccountModificationTransactionBodyBuilder = void 0;
const GeneratorUtils_1 = require("./GeneratorUtils");
const KeyDto_1 = require("./KeyDto");
class MultisigAccountModificationTransactionBodyBuilder {
    constructor(minRemovalDelta, minApprovalDelta, publicKeyAdditions, publicKeyDeletions) {
        this.minRemovalDelta = minRemovalDelta;
        this.minApprovalDelta = minApprovalDelta;
        this.multisigAccountModificationTransactionBody_Reserved1 = 0;
        this.publicKeyAdditions = publicKeyAdditions;
        this.publicKeyDeletions = publicKeyDeletions;
    }
    static loadFromBinary(payload) {
        const byteArray = Array.from(payload);
        const minRemovalDelta = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const minApprovalDelta = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const publicKeyAdditionsCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const publicKeyDeletionsCount = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const multisigAccountModificationTransactionBody_Reserved1 = GeneratorUtils_1.GeneratorUtils.bufferToUint(GeneratorUtils_1.GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const publicKeyAdditions = [];
        for (let i = 0; i < (Array.isArray(publicKeyAdditionsCount) ? GeneratorUtils_1.GeneratorUtils.compact(publicKeyAdditionsCount) : publicKeyAdditionsCount); i++) {
            const item = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            publicKeyAdditions.push(item);
            byteArray.splice(0, item.getSize());
        }
        const publicKeyDeletions = [];
        for (let i = 0; i < (Array.isArray(publicKeyDeletionsCount) ? GeneratorUtils_1.GeneratorUtils.compact(publicKeyDeletionsCount) : publicKeyDeletionsCount); i++) {
            const item = KeyDto_1.KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            publicKeyDeletions.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new MultisigAccountModificationTransactionBodyBuilder(minRemovalDelta, minApprovalDelta, publicKeyAdditions, publicKeyDeletions);
    }
    getMinRemovalDelta() {
        return this.minRemovalDelta;
    }
    getMinApprovalDelta() {
        return this.minApprovalDelta;
    }
    getMultisigAccountModificationTransactionBody_Reserved1() {
        return this.multisigAccountModificationTransactionBody_Reserved1;
    }
    getPublicKeyAdditions() {
        return this.publicKeyAdditions;
    }
    getPublicKeyDeletions() {
        return this.publicKeyDeletions;
    }
    getSize() {
        let size = 0;
        size += 1;
        size += 1;
        size += 1;
        size += 1;
        size += 4;
        this.publicKeyAdditions.forEach((o) => size += o.getSize());
        this.publicKeyDeletions.forEach((o) => size += o.getSize());
        return size;
    }
    serialize() {
        let newArray = Uint8Array.from([]);
        const minRemovalDeltaBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinRemovalDelta(), 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minRemovalDeltaBytes);
        const minApprovalDeltaBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMinApprovalDelta(), 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, minApprovalDeltaBytes);
        const publicKeyAdditionsCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.publicKeyAdditions.length, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyAdditionsCountBytes);
        const publicKeyDeletionsCountBytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.publicKeyDeletions.length, 1);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyDeletionsCountBytes);
        const multisigAccountModificationTransactionBody_Reserved1Bytes = GeneratorUtils_1.GeneratorUtils.uintToBuffer(this.getMultisigAccountModificationTransactionBody_Reserved1(), 4);
        newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, multisigAccountModificationTransactionBody_Reserved1Bytes);
        this.publicKeyAdditions.forEach((item) => {
            const publicKeyAdditionsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyAdditionsBytes);
        });
        this.publicKeyDeletions.forEach((item) => {
            const publicKeyDeletionsBytes = item.serialize();
            newArray = GeneratorUtils_1.GeneratorUtils.concatTypedArrays(newArray, publicKeyDeletionsBytes);
        });
        return newArray;
    }
}
exports.MultisigAccountModificationTransactionBodyBuilder = MultisigAccountModificationTransactionBodyBuilder;
//# sourceMappingURL=MultisigAccountModificationTransactionBodyBuilder.js.map