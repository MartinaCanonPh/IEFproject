// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { AccountKeyFlagsDto } from './AccountKeyFlagsDto';
import { AccountStateFormatDto } from './AccountStateFormatDto';
import { AccountTypeDto } from './AccountTypeDto';
import { AddressDto } from './AddressDto';
import { GeneratorUtils } from './GeneratorUtils';
import { HeightActivityBucketsBuilder } from './HeightActivityBucketsBuilder';
import { HeightDto } from './HeightDto';
import { ImportanceSnapshotBuilder } from './ImportanceSnapshotBuilder';
import { KeyDto } from './KeyDto';
import { MosaicBuilder } from './MosaicBuilder';
import { MosaicIdDto } from './MosaicIdDto';
import { VotingKeyDto } from './VotingKeyDto';

/** Binary layout for non-historical account state. */
export class AccountStateBuilder {
    /** Address of account. */
    address: AddressDto;
    /** Height at which address has been obtained. */
    addressHeight: HeightDto;
    /** Public key of account. */
    publicKey: KeyDto;
    /** Height at which public key has been obtained. */
    publicKeyHeight: HeightDto;
    /** Type of account. */
    accountType: AccountTypeDto;
    /** Account format. */
    format: AccountStateFormatDto;
    /** Mask of supplemental account key flags. */
    supplementalAccountKeysMask: AccountKeyFlagsDto;
    /** Linked account public key. */
    linkedPublicKey?: KeyDto;
    /** Vrf public key. */
    vrfPublicKey?: KeyDto;
    /** Voting public key. */
    votingPublicKey?: VotingKeyDto;
    /** Node public key. */
    nodePublicKey?: KeyDto;
    /** Current importance snapshot of the account. */
    importanceSnapshots?: ImportanceSnapshotBuilder;
    /** Activity buckets of the account. */
    activityBuckets?: HeightActivityBucketsBuilder;
    /** Currency mosaic id. */
    currencyMosaicId: MosaicIdDto;
    /** Balances of account. */
    balances: MosaicBuilder[];

    /**
     * Constructor.
     *
     * @param address Address of account.
     * @param addressHeight Height at which address has been obtained.
     * @param publicKey Public key of account.
     * @param publicKeyHeight Height at which public key has been obtained.
     * @param accountType Type of account.
     * @param supplementalAccountKeysMask Mask of supplemental account key flags.
     * @param linkedPublicKey Linked account public key.
     * @param vrfPublicKey Vrf public key.
     * @param votingPublicKey Voting public key.
     * @param nodePublicKey Node public key.
     * @param importanceSnapshots Current importance snapshot of the account.
     * @param activityBuckets Activity buckets of the account.
     * @param currencyMosaicId Currency mosaic id.
     * @param balances Balances of account.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(address: AddressDto,  addressHeight: HeightDto,  publicKey: KeyDto,  publicKeyHeight: HeightDto,  accountType: AccountTypeDto,  supplementalAccountKeysMask: AccountKeyFlagsDto,  currencyMosaicId: MosaicIdDto,  balances: MosaicBuilder[],  linkedPublicKey?: KeyDto,  vrfPublicKey?: KeyDto,  votingPublicKey?: VotingKeyDto,  nodePublicKey?: KeyDto,  importanceSnapshots?: ImportanceSnapshotBuilder,  activityBuckets?: HeightActivityBucketsBuilder) {
        this.address = address;
        this.addressHeight = addressHeight;
        this.publicKey = publicKey;
        this.publicKeyHeight = publicKeyHeight;
        this.accountType = accountType;
        this.supplementalAccountKeysMask = supplementalAccountKeysMask;
        this.linkedPublicKey = linkedPublicKey;
        this.vrfPublicKey = vrfPublicKey;
        this.votingPublicKey = votingPublicKey;
        this.nodePublicKey = nodePublicKey;
        this.importanceSnapshots = importanceSnapshots;
        this.activityBuckets = activityBuckets;
        this.currencyMosaicId = currencyMosaicId;
        this.balances = balances;
        if (importanceSnapshots) {
            this.format = AccountStateFormatDto.HIGH_VALUE;
        }
        else {
            this.format = AccountStateFormatDto.HIGH_VALUE;
        }
    }

    /**
     * Creates an instance of AccountStateBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of AccountStateBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): AccountStateBuilder {
        const byteArray = Array.from(payload);
        const address = AddressDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, address.getSize());
        const addressHeight = HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, addressHeight.getSize());
        const publicKey = KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, publicKey.getSize());
        const publicKeyHeight = HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, publicKeyHeight.getSize());
        const accountType = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const format = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const supplementalAccountKeysMask = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const supplementalAccountKeysMaskConditionBytes = Uint8Array.from(byteArray.slice(0, 32));
        byteArray.splice(0, 32);
        const formatConditionBytes = Uint8Array.from(byteArray.slice(0, 1));
        byteArray.splice(0, 1);
        const currencyMosaicId = MosaicIdDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, currencyMosaicId.getSize());
        const balancesCount = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 2));
        byteArray.splice(0, 2);
        const balances: MosaicBuilder[] = [];
        for (let i = 0; i < (Array.isArray(balancesCount) ? GeneratorUtils.compact(balancesCount) : balancesCount); i++) {
            const item = MosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
            balances.push(item);
            byteArray.splice(0, item.getSize());
        }
        let linkedPublicKey;
        if (supplementalAccountKeysMask & AccountKeyFlagsDto.LINKED) {
            linkedPublicKey = KeyDto.loadFromBinary(supplementalAccountKeysMaskConditionBytes);
        }
        let vrfPublicKey;
        if (supplementalAccountKeysMask & AccountKeyFlagsDto.VRF) {
            vrfPublicKey = KeyDto.loadFromBinary(supplementalAccountKeysMaskConditionBytes);
        }
        let votingPublicKey;
        if (supplementalAccountKeysMask & AccountKeyFlagsDto.VOTING) {
            votingPublicKey = VotingKeyDto.loadFromBinary(supplementalAccountKeysMaskConditionBytes);
        }
        let nodePublicKey;
        if (supplementalAccountKeysMask & AccountKeyFlagsDto.NODE) {
            nodePublicKey = KeyDto.loadFromBinary(supplementalAccountKeysMaskConditionBytes);
        }
        let importanceSnapshots;
        if (format === AccountStateFormatDto.HIGH_VALUE) {
            importanceSnapshots = ImportanceSnapshotBuilder.loadFromBinary(formatConditionBytes);
        }
        let activityBuckets;
        if (format === AccountStateFormatDto.HIGH_VALUE) {
            activityBuckets = HeightActivityBucketsBuilder.loadFromBinary(formatConditionBytes);
        }
        // tslint:disable-next-line: max-line-length
        return new AccountStateBuilder(address, addressHeight, publicKey, publicKeyHeight, accountType, supplementalAccountKeysMask, currencyMosaicId, balances, linkedPublicKey, vrfPublicKey, votingPublicKey, nodePublicKey, importanceSnapshots, activityBuckets);
    }

    /**
     * Gets address of account.
     *
     * @return Address of account.
     */
    public getAddress(): AddressDto {
        return this.address;
    }

    /**
     * Gets height at which address has been obtained.
     *
     * @return Height at which address has been obtained.
     */
    public getAddressHeight(): HeightDto {
        return this.addressHeight;
    }

    /**
     * Gets public key of account.
     *
     * @return Public key of account.
     */
    public getPublicKey(): KeyDto {
        return this.publicKey;
    }

    /**
     * Gets height at which public key has been obtained.
     *
     * @return Height at which public key has been obtained.
     */
    public getPublicKeyHeight(): HeightDto {
        return this.publicKeyHeight;
    }

    /**
     * Gets type of account.
     *
     * @return Type of account.
     */
    public getAccountType(): AccountTypeDto {
        return this.accountType;
    }

    /**
     * Gets account format.
     *
     * @return Account format.
     */
    public getFormat(): AccountStateFormatDto {
        return this.format;
    }

    /**
     * Gets mask of supplemental account key flags.
     *
     * @return Mask of supplemental account key flags.
     */
    public getSupplementalAccountKeysMask(): AccountKeyFlagsDto {
        return this.supplementalAccountKeysMask;
    }

    /**
     * Gets linked account public key.
     *
     * @return Linked account public key.
     */
    public getLinkedPublicKey(): KeyDto | undefined {
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.LINKED) {
            throw new Error('supplementalAccountKeysMask is not set to LINKED.');
        }
        return this.linkedPublicKey;
    }

    /**
     * Gets vrf public key.
     *
     * @return Vrf public key.
     */
    public getVrfPublicKey(): KeyDto | undefined {
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.VRF) {
            throw new Error('supplementalAccountKeysMask is not set to VRF.');
        }
        return this.vrfPublicKey;
    }

    /**
     * Gets voting public key.
     *
     * @return Voting public key.
     */
    public getVotingPublicKey(): VotingKeyDto | undefined {
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.VOTING) {
            throw new Error('supplementalAccountKeysMask is not set to VOTING.');
        }
        return this.votingPublicKey;
    }

    /**
     * Gets node public key.
     *
     * @return Node public key.
     */
    public getNodePublicKey(): KeyDto | undefined {
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.NODE) {
            throw new Error('supplementalAccountKeysMask is not set to NODE.');
        }
        return this.nodePublicKey;
    }

    /**
     * Gets current importance snapshot of the account.
     *
     * @return Current importance snapshot of the account.
     */
    public getImportanceSnapshots(): ImportanceSnapshotBuilder | undefined {
        if (this.format !== AccountStateFormatDto.HIGH_VALUE) {
            throw new Error('format is not set to HIGH_VALUE.');
        }
        return this.importanceSnapshots;
    }

    /**
     * Gets activity buckets of the account.
     *
     * @return Activity buckets of the account.
     */
    public getActivityBuckets(): HeightActivityBucketsBuilder | undefined {
        if (this.format !== AccountStateFormatDto.HIGH_VALUE) {
            throw new Error('format is not set to HIGH_VALUE.');
        }
        return this.activityBuckets;
    }

    /**
     * Gets currency mosaic id.
     *
     * @return Currency mosaic id.
     */
    public getCurrencyMosaicId(): MosaicIdDto {
        return this.currencyMosaicId;
    }

    /**
     * Gets balances of account.
     *
     * @return Balances of account.
     */
    public getBalances(): MosaicBuilder[] {
        return this.balances;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.address.getSize();
        size += this.addressHeight.getSize();
        size += this.publicKey.getSize();
        size += this.publicKeyHeight.getSize();
        size += 1; // accountType
        size += 1; // format
        size += 1; // supplementalAccountKeysMask
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.LINKED) {
            size += this.linkedPublicKey!.getSize();
        }
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.VRF) {
            size += this.vrfPublicKey!.getSize();
        }
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.VOTING) {
            size += this.votingPublicKey!.getSize();
        }
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.NODE) {
            size += this.nodePublicKey!.getSize();
        }
        if (this.format === AccountStateFormatDto.HIGH_VALUE) {
            size += this.importanceSnapshots!.getSize();
        }
        if (this.format === AccountStateFormatDto.HIGH_VALUE) {
            size += this.activityBuckets!.getSize();
        }
        size += this.currencyMosaicId.getSize();
        size += 2; // balancesCount
        this.balances.forEach((o) => size += o.getSize());
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const addressBytes = this.address.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, addressBytes);
        const addressHeightBytes = this.addressHeight.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, addressHeightBytes);
        const publicKeyBytes = this.publicKey.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, publicKeyBytes);
        const publicKeyHeightBytes = this.publicKeyHeight.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, publicKeyHeightBytes);
        const accountTypeBytes = GeneratorUtils.uintToBuffer(this.accountType, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, accountTypeBytes);
        const formatBytes = GeneratorUtils.uintToBuffer(this.format, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, formatBytes);
        const supplementalAccountKeysMaskBytes = GeneratorUtils.uintToBuffer(this.getSupplementalAccountKeysMask(), 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, supplementalAccountKeysMaskBytes);
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.LINKED) {
            const linkedPublicKeyBytes = this.linkedPublicKey!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, linkedPublicKeyBytes);
        }
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.VRF) {
            const vrfPublicKeyBytes = this.vrfPublicKey!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, vrfPublicKeyBytes);
        }
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.VOTING) {
            const votingPublicKeyBytes = this.votingPublicKey!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, votingPublicKeyBytes);
        }
        if (this.supplementalAccountKeysMask & AccountKeyFlagsDto.NODE) {
            const nodePublicKeyBytes = this.nodePublicKey!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, nodePublicKeyBytes);
        }
        if (this.format === AccountStateFormatDto.HIGH_VALUE) {
            const importanceSnapshotsBytes = this.importanceSnapshots!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, importanceSnapshotsBytes);
        }
        if (this.format === AccountStateFormatDto.HIGH_VALUE) {
            const activityBucketsBytes = this.activityBuckets!.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, activityBucketsBytes);
        }
        const currencyMosaicIdBytes = this.currencyMosaicId.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, currencyMosaicIdBytes);
        const balancesCountBytes = GeneratorUtils.uintToBuffer(this.balances.length, 2);
        newArray = GeneratorUtils.concatTypedArrays(newArray, balancesCountBytes);
        this.balances.forEach((item) => {
            const balancesBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, balancesBytes);
        });
        return newArray;
    }
}
