// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';
import { KeyDto } from './KeyDto';

/** Binary layout for a multisig entry. */
export class MultisigEntryBuilder {
    /** Minimum approval for modifications. */
    minApproval: number;
    /** Minimum approval for removal. */
    minRemoval: number;
    /** Account public key. */
    accountPublicKey: KeyDto;
    /** Cosignatories for account. */
    cosignatoryPublicKeys: KeyDto[];
    /** Accounts for which the entry is cosignatory. */
    multisigPublicKeys: KeyDto[];

    /**
     * Constructor.
     *
     * @param minApproval Minimum approval for modifications.
     * @param minRemoval Minimum approval for removal.
     * @param accountPublicKey Account public key.
     * @param cosignatoryPublicKeys Cosignatories for account.
     * @param multisigPublicKeys Accounts for which the entry is cosignatory.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(minApproval: number,  minRemoval: number,  accountPublicKey: KeyDto,  cosignatoryPublicKeys: KeyDto[],  multisigPublicKeys: KeyDto[]) {
        this.minApproval = minApproval;
        this.minRemoval = minRemoval;
        this.accountPublicKey = accountPublicKey;
        this.cosignatoryPublicKeys = cosignatoryPublicKeys;
        this.multisigPublicKeys = multisigPublicKeys;
    }

    /**
     * Creates an instance of MultisigEntryBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of MultisigEntryBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): MultisigEntryBuilder {
        const byteArray = Array.from(payload);
        const minApproval = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const minRemoval = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 4));
        byteArray.splice(0, 4);
        const accountPublicKey = KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, accountPublicKey.getSize());
        // tslint:disable-next-line: max-line-length
        const cosignatoryPublicKeysCount = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const cosignatoryPublicKeys: KeyDto[] = [];
        // tslint:disable-next-line: max-line-length
        for (let i = 0; i < (Array.isArray(cosignatoryPublicKeysCount) ? GeneratorUtils.compact(cosignatoryPublicKeysCount) : cosignatoryPublicKeysCount); i++) {
            const item = KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            cosignatoryPublicKeys.push(item);
            byteArray.splice(0, item.getSize());
        }
        const multisigPublicKeysCount = GeneratorUtils.bufferToUint64(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 8));
        byteArray.splice(0, 8);
        const multisigPublicKeys: KeyDto[] = [];
        // tslint:disable-next-line: max-line-length
        for (let i = 0; i < (Array.isArray(multisigPublicKeysCount) ? GeneratorUtils.compact(multisigPublicKeysCount) : multisigPublicKeysCount); i++) {
            const item = KeyDto.loadFromBinary(Uint8Array.from(byteArray));
            multisigPublicKeys.push(item);
            byteArray.splice(0, item.getSize());
        }
        return new MultisigEntryBuilder(minApproval, minRemoval, accountPublicKey, cosignatoryPublicKeys, multisigPublicKeys);
    }

    /**
     * Gets minimum approval for modifications.
     *
     * @return Minimum approval for modifications.
     */
    public getMinApproval(): number {
        return this.minApproval;
    }

    /**
     * Gets minimum approval for removal.
     *
     * @return Minimum approval for removal.
     */
    public getMinRemoval(): number {
        return this.minRemoval;
    }

    /**
     * Gets account public key.
     *
     * @return Account public key.
     */
    public getAccountPublicKey(): KeyDto {
        return this.accountPublicKey;
    }

    /**
     * Gets cosignatories for account.
     *
     * @return Cosignatories for account.
     */
    public getCosignatoryPublicKeys(): KeyDto[] {
        return this.cosignatoryPublicKeys;
    }

    /**
     * Gets accounts for which the entry is cosignatory.
     *
     * @return Accounts for which the entry is cosignatory.
     */
    public getMultisigPublicKeys(): KeyDto[] {
        return this.multisigPublicKeys;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += 4; // minApproval
        size += 4; // minRemoval
        size += this.accountPublicKey.getSize();
        size += 8; // cosignatoryPublicKeysCount
        this.cosignatoryPublicKeys.forEach((o) => size += o.getSize());
        size += 8; // multisigPublicKeysCount
        this.multisigPublicKeys.forEach((o) => size += o.getSize());
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const minApprovalBytes = GeneratorUtils.uintToBuffer(this.getMinApproval(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, minApprovalBytes);
        const minRemovalBytes = GeneratorUtils.uintToBuffer(this.getMinRemoval(), 4);
        newArray = GeneratorUtils.concatTypedArrays(newArray, minRemovalBytes);
        const accountPublicKeyBytes = this.accountPublicKey.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, accountPublicKeyBytes);
        // tslint:disable-next-line: max-line-length
        const cosignatoryPublicKeysCountBytes = GeneratorUtils.uint64ToBuffer(GeneratorUtils.fromUint(this.cosignatoryPublicKeys.length));
        newArray = GeneratorUtils.concatTypedArrays(newArray, cosignatoryPublicKeysCountBytes);
        this.cosignatoryPublicKeys.forEach((item) => {
            const cosignatoryPublicKeysBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, cosignatoryPublicKeysBytes);
        });
        // tslint:disable-next-line: max-line-length
        const multisigPublicKeysCountBytes = GeneratorUtils.uint64ToBuffer(GeneratorUtils.fromUint(this.multisigPublicKeys.length));
        newArray = GeneratorUtils.concatTypedArrays(newArray, multisigPublicKeysCountBytes);
        this.multisigPublicKeys.forEach((item) => {
            const multisigPublicKeysBytes = item.serialize();
            newArray = GeneratorUtils.concatTypedArrays(newArray, multisigPublicKeysBytes);
        });
        return newArray;
    }
}
