// tslint:disable: jsdoc-format
/**
*** Copyright (c) 2016-present,
*** Jaguar0625, gimre, BloodyRookie, Tech Bureau, Corp. All rights reserved.
***
*** This file is part of Catapult.
***
*** Catapult is free software: you can redistribute it and/or modify
*** it under the terms of the GNU Lesser General Public License as published by
*** the Free Software Foundation, either version 3 of the License, or
*** (at your option) any later version.
***
*** Catapult is distributed in the hope that it will be useful,
*** but WITHOUT ANY WARRANTY; without even the implied warranty of
*** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
*** GNU Lesser General Public License for more details.
***
*** You should have received a copy of the GNU Lesser General Public License
*** along with Catapult. If not, see <http://www.gnu.org/licenses/>.
**/

import { GeneratorUtils } from './GeneratorUtils';
import { Hash256Dto } from './Hash256Dto';
import { HeightDto } from './HeightDto';
import { KeyDto } from './KeyDto';
import { LockStatusDto } from './LockStatusDto';
import { MosaicBuilder } from './MosaicBuilder';

/** Binary layout for hash lock transaction info. */
export class HashLockInfoBuilder {
    /** Sender public key. */
    senderPublicKey: KeyDto;
    /** Mosaic associated with lock. */
    mosaic: MosaicBuilder;
    /** Height at which the lock expires. */
    endHeight: HeightDto;
    /** Flag indicating whether or not the lock was already used. */
    status: LockStatusDto;
    /** Hash. */
    hash: Hash256Dto;

    /**
     * Constructor.
     *
     * @param senderPublicKey Sender public key.
     * @param mosaic Mosaic associated with lock.
     * @param endHeight Height at which the lock expires.
     * @param status Flag indicating whether or not the lock was already used.
     * @param hash Hash.
     */
    // tslint:disable-next-line: max-line-length
    public constructor(senderPublicKey: KeyDto,  mosaic: MosaicBuilder,  endHeight: HeightDto,  status: LockStatusDto,  hash: Hash256Dto) {
        this.senderPublicKey = senderPublicKey;
        this.mosaic = mosaic;
        this.endHeight = endHeight;
        this.status = status;
        this.hash = hash;
    }

    /**
     * Creates an instance of HashLockInfoBuilder from binary payload.
     *
     * @param payload Byte payload to use to serialize the object.
     * @return Instance of HashLockInfoBuilder.
     */
    public static loadFromBinary(payload: Uint8Array): HashLockInfoBuilder {
        const byteArray = Array.from(payload);
        const senderPublicKey = KeyDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, senderPublicKey.getSize());
        const mosaic = MosaicBuilder.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, mosaic.getSize());
        const endHeight = HeightDto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, endHeight.getSize());
        const status = GeneratorUtils.bufferToUint(GeneratorUtils.getBytes(Uint8Array.from(byteArray), 1));
        byteArray.splice(0, 1);
        const hash = Hash256Dto.loadFromBinary(Uint8Array.from(byteArray));
        byteArray.splice(0, hash.getSize());
        return new HashLockInfoBuilder(senderPublicKey, mosaic, endHeight, status, hash);
    }

    /**
     * Gets sender public key.
     *
     * @return Sender public key.
     */
    public getSenderPublicKey(): KeyDto {
        return this.senderPublicKey;
    }

    /**
     * Gets mosaic associated with lock.
     *
     * @return Mosaic associated with lock.
     */
    public getMosaic(): MosaicBuilder {
        return this.mosaic;
    }

    /**
     * Gets height at which the lock expires.
     *
     * @return Height at which the lock expires.
     */
    public getEndHeight(): HeightDto {
        return this.endHeight;
    }

    /**
     * Gets flag indicating whether or not the lock was already used.
     *
     * @return Flag indicating whether or not the lock was already used.
     */
    public getStatus(): LockStatusDto {
        return this.status;
    }

    /**
     * Gets hash.
     *
     * @return Hash.
     */
    public getHash(): Hash256Dto {
        return this.hash;
    }

    /**
     * Gets the size of the object.
     *
     * @return Size in bytes.
     */
    public getSize(): number {
        let size = 0;
        size += this.senderPublicKey.getSize();
        size += this.mosaic.getSize();
        size += this.endHeight.getSize();
        size += 1; // status
        size += this.hash.getSize();
        return size;
    }

    /**
     * Serializes an object to bytes.
     *
     * @return Serialized bytes.
     */
    public serialize(): Uint8Array {
        let newArray = Uint8Array.from([]);
        const senderPublicKeyBytes = this.senderPublicKey.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, senderPublicKeyBytes);
        const mosaicBytes = this.mosaic.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, mosaicBytes);
        const endHeightBytes = this.endHeight.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, endHeightBytes);
        const statusBytes = GeneratorUtils.uintToBuffer(this.status, 1);
        newArray = GeneratorUtils.concatTypedArrays(newArray, statusBytes);
        const hashBytes = this.hash.serialize();
        newArray = GeneratorUtils.concatTypedArrays(newArray, hashBytes);
        return newArray;
    }
}
